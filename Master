b1 = ['-', '-', '-',
       '-', '-', '-',
       '-', '-', '-']
b2 = ['-', '-', '-',
       '-', '-', '-',
       '-', '-', '-']
b3 = ['-', '-', '-',
       '-', '-', '-',
       '-', '-', '-']
b4 = ['-', '-', '-',
       '-', '-', '-',
       '-', '-', '-']
b5 = ['-', '-', '-',
       '-', '-', '-',
       '-', '-', '-']
b6 = ['-', '-', '-',
       '-', '-', '-',
       '-', '-', '-']
b7 = ['-', '-', '-',
       '-', '-', '-',
       '-', '-', '-']
b8 = ['-', '-', '-',
       '-', '-', '-',
       '-', '-', '-']
b9 = ['-', '-', '-',
       '-', '-', '-',
       '-', '-', '-']

currentPlayer = "X"

winner = None

winnerb1 = None
winnerb2 = None
winnerb3 = None
winnerb4 = None
winnerb5 = None
winnerb6 = None
winnerb7 = None
winnerb8 = None
winnerb9 = None

gameRunning = True

gameRunningb1 = True
gameRunningb2 = True
gameRunningb3 = True
gameRunningb4 = True
gameRunningb5 = True
gameRunningb6 = True
gameRunningb7 = True
gameRunningb8 = True
gameRunningb9 = True

#printing boards

def printBoard():
    print(b1[0] + " | " + b1[1] + " | " + b1[2] + " || " + b2[0] + " | " + b2[1] + " | " + b2[2] + " || " + b3[0] + " | " + b3[1] + " | " + b3[2])
    print("-" * 10 + "   " + "-" * 10 + "   " + "-" * 10)
    print(b1[3] + " | " + b1[4] + " | " + b1[5] + " || " + b2[3] + " | " + b2[4] + " | " + b2[5] + " || " + b3[3] + " | " + b3[4] + " | " + b3[5])
    print("-" * 10 + "   " + "-" * 10 + "   " + "-" * 10)
    print(b1[6] + " | " + b1[7] + " | " + b1[8] + " || " + b2[6] + " | " + b2[7] + " | " + b2[8] + " || " + b3[6] + " | " + b3[7] + " | " + b3[8])
    print("-" * 36)
    print("-" * 36)
    print(b4[0] + " | " + b4[1] + " | " + b4[2] + " || " + b5[0] + " | " + b5[1] + " | " + b5[2] + " || " + b6[0] + " | " + b6[1] + " | " + b6[2])
    print("-" * 10 + "   " + "-" * 10 + "   " + "-" * 10)
    print(b4[3] + " | " + b4[4] + " | " + b4[5] + " || " + b5[3] + " | " + b5[4] + " | " + b5[5] + " || " + b6[3] + " | " + b6[4] + " | " + b6[5])
    print("-" * 10 + "   " + "-" * 10 + "   " + "-" * 10)
    print(b4[6] + " | " + b4[7] + " | " + b4[8] + " || " + b5[6] + " | " + b5[7] + " | " + b5[8] + " || " + b6[6] + " | " + b6[7] + " | " + b6[8])
    print("-" * 36)
    print("-" * 36)
    print(b7[0] + " | " + b7[1] + " | " + b7[2] + " || " + b8[0] + " | " + b8[1] + " | " + b8[2] + " || " + b9[0] + " | " + b9[1] + " | " + b9[2])
    print("-" * 10 + "   " + "-" * 10 + "   " + "-" * 10)
    print(b7[3] + " | " + b7[4] + " | " + b7[5] + " || " + b8[3] + " | " + b8[4] + " | " + b8[5] + " || " + b9[3] + " | " + b9[4] + " | " + b9[5])
    print("-" * 10 + "   " + "-" * 10 + "   " + "-" * 10)
    print(b7[6] + " | " + b7[7] + " | " + b7[8] + " || " + b8[6] + " | " + b8[7] + " | " + b8[8] + " || " + b9[6] + " | " + b9[7] + " | " + b9[8])


#colour


#take player input
'''def playerInput():
    while True:
        if currentPlayer == "X":
            inp = int(input(f"Enter a number 1-9 \033[1;34m Player (X) \033[0;0m : "))
        else:
            inp = int(input(f"Enter a number 1-9 \033[1;31m Player (0) \033[0;0m : "))
        if inp >= 1 and inp <= 9 and b[inp-1] == "-":
            b_[inp-1] = currentPlayer
            break
        else:
            if currentPlayer == "X":
                print(f"Oops! Try again! Player - \033[1;34m Player (X) \033[0;0m ! ")
            else:
                print(f"Oops! Try again! Player - \033[1;31m Player (0) \033[0;0m ! ")
            printBoard(b_)'''


#check for win or tie

#check b1 sub-board

def checkWinb1():
    if checkDiagonalb1() or checkColumnb1() or checkRowb1():
        winnerb1 = currentPlayer
        gameRunningb1 = False

def checkColumnb1():
    if (b1[0] == b1[1] == b1[2] and b1[0] != "-") or (b1[3] == b1[4] == b1[5] and b1[3] != "-") or (b1[6] == b1[7] == b1[8] and b1[6] != "-"):
        winnerb1 = currentPlayer
        return True
def checkRowb1():
    if (b1[0] == b1[3] == b1[6] and b1[0] != "-") or (b1[1] == b1[4] == b1[7] and b1[1] != "-") or (b1[2] == b1[5] == b1[8] and b1[2] != "-"):
        winnerb1 = currentPlayer
        return True
def checkDiagonalb1():
    if (b1[0] == b1[4] == b1[8] and b1[0] != "-") or (b1[2] == b1[4] == b1[6] and b1[2] != "-"):
        winnerb1 = currentPlayer
        return True
def checkTieb1():
    if "-" not in b1:
        checkWinb1()
        if winnerb1 == None:
            return True
            gameRunningb1 = False
        else:
            return False

#check b2 sub-board

def checkWinb1():
    if checkDiagonalb1() or checkColumnb1() or checkRowb1():
        winnerb1 = currentPlayer
        gameRunningb1 = False

def checkColumnb1():
    if (b1[0] == b1[1] == b1[2] and b1[0] != "-") or (b1[3] == b1[4] == b1[5] and b1[3] != "-") or (b1[6] == b1[7] == b1[8] and b1[6] != "-"):
        winnerb1 = currentPlayer
        return True
def checkRowb1():
    if (b1[0] == b1[3] == b1[6] and b1[0] != "-") or (b1[1] == b1[4] == b1[7] and b1[1] != "-") or (b1[2] == b1[5] == b1[8] and b1[2] != "-"):
        winnerb1 = currentPlayer
        return True
def checkDiagonalb1():
    if (b1[0] == b1[4] == b1[8] and b1[0] != "-") or (b1[2] == b1[4] == b1[6] and b1[2] != "-"):
        winnerb1 = currentPlayer
        return True
def checkTieb1():
    if "-" not in b1:
        checkWinb1()
        if winnerb1 == None:
            return True
            gameRunningb1 = False
        else:
            return False

#check b3 sub-board

def checkWinb1():
    if checkDiagonalb1() or checkColumnb1() or checkRowb1():
        winnerb1 = currentPlayer
        gameRunningb1 = False

def checkColumnb1():
    if (b1[0] == b1[1] == b1[2] and b1[0] != "-") or (b1[3] == b1[4] == b1[5] and b1[3] != "-") or (b1[6] == b1[7] == b1[8] and b1[6] != "-"):
        winnerb1 = currentPlayer
        return True
def checkRowb1():
    if (b1[0] == b1[3] == b1[6] and b1[0] != "-") or (b1[1] == b1[4] == b1[7] and b1[1] != "-") or (b1[2] == b1[5] == b1[8] and b1[2] != "-"):
        winnerb1 = currentPlayer
        return True
def checkDiagonalb1():
    if (b1[0] == b1[4] == b1[8] and b1[0] != "-") or (b1[2] == b1[4] == b1[6] and b1[2] != "-"):
        winnerb1 = currentPlayer
        return True
def checkTieb1():
    if "-" not in b1:
        checkWinb1()
        if winnerb1 == None:
            return True
            gameRunningb1 = False
        else:
            return False

#check b-4 sub-board

def checkWinb1():
    if checkDiagonalb1() or checkColumnb1() or checkRowb1():
        winnerb1 = currentPlayer
        gameRunningb1 = False

def checkColumnb1():
    if (b1[0] == b1[1] == b1[2] and b1[0] != "-") or (b1[3] == b1[4] == b1[5] and b1[3] != "-") or (b1[6] == b1[7] == b1[8] and b1[6] != "-"):
        winnerb1 = currentPlayer
        return True
def checkRowb1():
    if (b1[0] == b1[3] == b1[6] and b1[0] != "-") or (b1[1] == b1[4] == b1[7] and b1[1] != "-") or (b1[2] == b1[5] == b1[8] and b1[2] != "-"):
        winnerb1 = currentPlayer
        return True
def checkDiagonalb1():
    if (b1[0] == b1[4] == b1[8] and b1[0] != "-") or (b1[2] == b1[4] == b1[6] and b1[2] != "-"):
        winnerb1 = currentPlayer
        return True
def checkTieb1():
    if "-" not in b1:
        checkWinb1()
        if winnerb1 == None:
            return True
            gameRunningb1 = False
        else:
            return False

#check b5 sub-board

def checkWinb1():
    if checkDiagonalb1() or checkColumnb1() or checkRowb1():
        winnerb1 = currentPlayer
        gameRunningb1 = False

def checkColumnb1():
    if (b1[0] == b1[1] == b1[2] and b1[0] != "-") or (b1[3] == b1[4] == b1[5] and b1[3] != "-") or (b1[6] == b1[7] == b1[8] and b1[6] != "-"):
        winnerb1 = currentPlayer
        return True
def checkRowb1():
    if (b1[0] == b1[3] == b1[6] and b1[0] != "-") or (b1[1] == b1[4] == b1[7] and b1[1] != "-") or (b1[2] == b1[5] == b1[8] and b1[2] != "-"):
        winnerb1 = currentPlayer
        return True
def checkDiagonalb1():
    if (b1[0] == b1[4] == b1[8] and b1[0] != "-") or (b1[2] == b1[4] == b1[6] and b1[2] != "-"):
        winnerb1 = currentPlayer
        return True
def checkTieb1():
    if "-" not in b1:
        checkWinb1()
        if winnerb1 == None:
            return True
            gameRunningb1 = False
        else:
            return False

#check b6 sub-board

def checkWinb1():
    if checkDiagonalb1() or checkColumnb1() or checkRowb1():
        winnerb1 = currentPlayer
        gameRunningb1 = False

def checkColumnb1():
    if (b1[0] == b1[1] == b1[2] and b1[0] != "-") or (b1[3] == b1[4] == b1[5] and b1[3] != "-") or (b1[6] == b1[7] == b1[8] and b1[6] != "-"):
        winnerb1 = currentPlayer
        return True
def checkRowb1():
    if (b1[0] == b1[3] == b1[6] and b1[0] != "-") or (b1[1] == b1[4] == b1[7] and b1[1] != "-") or (b1[2] == b1[5] == b1[8] and b1[2] != "-"):
        winnerb1 = currentPlayer
        return True
def checkDiagonalb1():
    if (b1[0] == b1[4] == b1[8] and b1[0] != "-") or (b1[2] == b1[4] == b1[6] and b1[2] != "-"):
        winnerb1 = currentPlayer
        return True
def checkTieb1():
    if "-" not in b1:
        checkWinb1()
        if winnerb1 == None:
            return True
            gameRunningb1 = False
        else:
            return False

#check b7 sub-board

def checkWinb1():
    if checkDiagonalb1() or checkColumnb1() or checkRowb1():
        winnerb1 = currentPlayer
        gameRunningb1 = False

def checkColumnb1():
    if (b1[0] == b1[1] == b1[2] and b1[0] != "-") or (b1[3] == b1[4] == b1[5] and b1[3] != "-") or (b1[6] == b1[7] == b1[8] and b1[6] != "-"):
        winnerb1 = currentPlayer
        return True
def checkRowb1():
    if (b1[0] == b1[3] == b1[6] and b1[0] != "-") or (b1[1] == b1[4] == b1[7] and b1[1] != "-") or (b1[2] == b1[5] == b1[8] and b1[2] != "-"):
        winnerb1 = currentPlayer
        return True
def checkDiagonalb1():
    if (b1[0] == b1[4] == b1[8] and b1[0] != "-") or (b1[2] == b1[4] == b1[6] and b1[2] != "-"):
        winnerb1 = currentPlayer
        return True
def checkTieb1():
    if "-" not in b1:
        checkWinb1()
        if winnerb1 == None:
            return True
            gameRunningb1 = False
        else:
            return False

#check b8 sub-board

def checkWinb1():
    if checkDiagonalb1() or checkColumnb1() or checkRowb1():
        winnerb1 = currentPlayer
        gameRunningb1 = False

def checkColumnb1():
    if (b1[0] == b1[1] == b1[2] and b1[0] != "-") or (b1[3] == b1[4] == b1[5] and b1[3] != "-") or (b1[6] == b1[7] == b1[8] and b1[6] != "-"):
        winnerb1 = currentPlayer
        return True
def checkRowb1():
    if (b1[0] == b1[3] == b1[6] and b1[0] != "-") or (b1[1] == b1[4] == b1[7] and b1[1] != "-") or (b1[2] == b1[5] == b1[8] and b1[2] != "-"):
        winnerb1 = currentPlayer
        return True
def checkDiagonalb1():
    if (b1[0] == b1[4] == b1[8] and b1[0] != "-") or (b1[2] == b1[4] == b1[6] and b1[2] != "-"):
        winnerb1 = currentPlayer
        return True
def checkTieb1():
    if "-" not in b1:
        checkWinb1()
        if winnerb1 == None:
            return True
            gameRunningb1 = False
        else:
            return False

#check b9 sub-board

def checkWinb1():
    if checkDiagonalb1() or checkColumnb1() or checkRowb1():
        winnerb1 = currentPlayer
        gameRunningb1 = False

def checkColumnb1():
    if (b1[0] == b1[1] == b1[2] and b1[0] != "-") or (b1[3] == b1[4] == b1[5] and b1[3] != "-") or (b1[6] == b1[7] == b1[8] and b1[6] != "-"):
        winnerb1 = currentPlayer
        return True
def checkRowb1():
    if (b1[0] == b1[3] == b1[6] and b1[0] != "-") or (b1[1] == b1[4] == b1[7] and b1[1] != "-") or (b1[2] == b1[5] == b1[8] and b1[2] != "-"):
        winnerb1 = currentPlayer
        return True
def checkDiagonalb1():
    if (b1[0] == b1[4] == b1[8] and b1[0] != "-") or (b1[2] == b1[4] == b1[6] and b1[2] != "-"):
        winnerb1 = currentPlayer
        return True
def checkTieb1():
    if "-" not in b1:
        checkWinb1()
        if winnerb1 == None:
            return True
            gameRunningb1 = False
        else:
            return False

#switch the player
def switchPlayer():
    global currentPlayer
    if currentPlayer == "X":
        currentPlayer = "O"
    else:
        currentPlayer = "X"



#check for win or tie again

import time

printBoard()