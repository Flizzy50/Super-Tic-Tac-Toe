b1 = ['-', '-', '-',
       '-', '-', '-',
       '-', '-', '-']
b2 = ['-', '-', '-',
       '-', '-', '-',
       '-', '-', '-']
b3 = ['-', '-', '-',
       '-', '-', '-',
       '-', '-', '-']
b4 = ['-', '-', '-',
       '-', '-', '-',
       '-', '-', '-']
b5 = ['-', '-', '-',
       '-', '-', '-',
       '-', '-', '-']
b6 = ['-', '-', '-',
       '-', '-', '-',
       '-', '-', '-']
b7 = ['-', '-', '-',
       '-', '-', '-',
       '-', '-', '-']
b8 = ['-', '-', '-',
       '-', '-', '-',
       '-', '-', '-']
b9 = ['-', '-', '-',
       '-', '-', '-',
       '-', '-', '-']

currentPlayer = "X"

winner = None

winnerb1 = None
winnerb2 = None
winnerb3 = None
winnerb4 = None
winnerb5 = None
winnerb6 = None
winnerb7 = None
winnerb8 = None
winnerb9 = None

gameRunning = True

gameRunningb1 = True
gameRunningb2 = True
gameRunningb3 = True
gameRunningb4 = True
gameRunningb5 = True
gameRunningb6 = True
gameRunningb7 = True
gameRunningb8 = True
gameRunningb9 = True

#printing boards

def printBoard():
    print(b1[0] + " | " + b1[1] + " | " + b1[2] + " || " + b2[0] + " | " + b2[1] + " | " + b2[2] + " || " + b3[0] + " | " + b3[1] + " | " + b3[2])
    print("-" * 10 + "   " + "-" * 10 + "   " + "-" * 10)
    print(b1[3] + " | " + b1[4] + " | " + b1[5] + " || " + b2[3] + " | " + b2[4] + " | " + b2[5] + " || " + b3[3] + " | " + b3[4] + " | " + b3[5])
    print("-" * 10 + "   " + "-" * 10 + "   " + "-" * 10)
    print(b1[6] + " | " + b1[7] + " | " + b1[8] + " || " + b2[6] + " | " + b2[7] + " | " + b2[8] + " || " + b3[6] + " | " + b3[7] + " | " + b3[8])
    print("-" * 36)
    print("-" * 36)
    print(b4[0] + " | " + b4[1] + " | " + b4[2] + " || " + b5[0] + " | " + b5[1] + " | " + b5[2] + " || " + b6[0] + " | " + b6[1] + " | " + b6[2])
    print("-" * 10 + "   " + "-" * 10 + "   " + "-" * 10)
    print(b4[3] + " | " + b4[4] + " | " + b4[5] + " || " + b5[3] + " | " + b5[4] + " | " + b5[5] + " || " + b6[3] + " | " + b6[4] + " | " + b6[5])
    print("-" * 10 + "   " + "-" * 10 + "   " + "-" * 10)
    print(b4[6] + " | " + b4[7] + " | " + b4[8] + " || " + b5[6] + " | " + b5[7] + " | " + b5[8] + " || " + b6[6] + " | " + b6[7] + " | " + b6[8])
    print("-" * 36)
    print("-" * 36)
    print(b7[0] + " | " + b7[1] + " | " + b7[2] + " || " + b8[0] + " | " + b8[1] + " | " + b8[2] + " || " + b9[0] + " | " + b9[1] + " | " + b9[2])
    print("-" * 10 + "   " + "-" * 10 + "   " + "-" * 10)
    print(b7[3] + " | " + b7[4] + " | " + b7[5] + " || " + b8[3] + " | " + b8[4] + " | " + b8[5] + " || " + b9[3] + " | " + b9[4] + " | " + b9[5])
    print("-" * 10 + "   " + "-" * 10 + "   " + "-" * 10)
    print(b7[6] + " | " + b7[7] + " | " + b7[8] + " || " + b8[6] + " | " + b8[7] + " | " + b8[8] + " || " + b9[6] + " | " + b9[7] + " | " + b9[8])


#colour


#take player input
def playerInputb1():
    while True:
        if currentPlayer == "X":
            inp = int(input(f"Enter a number 1-9 \033[1;34m Player (X) \033[0;0m : "))
        else:
            inp = int(input(f"Enter a number 1-9 \033[1;31m Player (0) \033[0;0m : "))
        if inp >= 1 and inp <= 9 and b1[inp-1] == "-":
            b1[inp-1] = currentPlayer
            break
        else:
            if currentPlayer == "X":
                print(f"Oops! Try again! Player - \033[1;34m Player (X) \033[0;0m ! ")
            else:
                print(f"Oops! Try again! Player - \033[1;31m Player (0) \033[0;0m ! ")
            printBoard()

def playerInputb2():
    while True:
        if currentPlayer == "X":
            inp = int(input(f"Enter a number 1-9 \033[1;34m Player (X) \033[0;0m : "))
        else:
            inp = int(input(f"Enter a number 1-9 \033[1;31m Player (0) \033[0;0m : "))
        if inp >= 1 and inp <= 9 and b2[inp-1] == "-":
            b2[inp-1] = currentPlayer
            break
        else:
            if currentPlayer == "X":
                print(f"Oops! Try again! Player - \033[1;34m Player (X) \033[0;0m ! ")
            else:
                print(f"Oops! Try again! Player - \033[1;31m Player (0) \033[0;0m ! ")
            printBoard()

def playerInputb3():
    while True:
        if currentPlayer == "X":
            inp = int(input(f"Enter a number 1-9 \033[1;34m Player (X) \033[0;0m : "))
        else:
            inp = int(input(f"Enter a number 1-9 \033[1;31m Player (0) \033[0;0m : "))
        if inp >= 1 and inp <= 9 and b3[inp-1] == "-":
            b3[inp-1] = currentPlayer
            break
        else:
            if currentPlayer == "X":
                print(f"Oops! Try again! Player - \033[1;34m Player (X) \033[0;0m ! ")
            else:
                print(f"Oops! Try again! Player - \033[1;31m Player (0) \033[0;0m ! ")
            printBoard()

def playerInputb4():
    while True:
        if currentPlayer == "X":
            inp = int(input(f"Enter a number 1-9 \033[1;34m Player (X) \033[0;0m : "))
        else:
            inp = int(input(f"Enter a number 1-9 \033[1;31m Player (0) \033[0;0m : "))
        if inp >= 1 and inp <= 9 and b4[inp-1] == "-":
            b4[inp-1] = currentPlayer
            break
        else:
            if currentPlayer == "X":
                print(f"Oops! Try again! Player - \033[1;34m Player (X) \033[0;0m ! ")
            else:
                print(f"Oops! Try again! Player - \033[1;31m Player (0) \033[0;0m ! ")
            printBoard()

def playerInputb5():
    while True:
        if currentPlayer == "X":
            inp = int(input(f"Enter a number 1-9 \033[1;34m Player (X) \033[0;0m : "))
        else:
            inp = int(input(f"Enter a number 1-9 \033[1;31m Player (0) \033[0;0m : "))
        if inp >= 1 and inp <= 9 and b5[inp-1] == "-":
            b5[inp-1] = currentPlayer
            break
        else:
            if currentPlayer == "X":
                print(f"Oops! Try again! Player - \033[1;34m Player (X) \033[0;0m ! ")
            else:
                print(f"Oops! Try again! Player - \033[1;31m Player (0) \033[0;0m ! ")
            printBoard()

def playerInputb6():
    while True:
        if currentPlayer == "X":
            inp = int(input(f"Enter a number 1-9 \033[1;34m Player (X) \033[0;0m : "))
        else:
            inp = int(input(f"Enter a number 1-9 \033[1;31m Player (0) \033[0;0m : "))
        if inp >= 1 and inp <= 9 and b6[inp-1] == "-":
            b6[inp-1] = currentPlayer
            break
        else:
            if currentPlayer == "X":
                print(f"Oops! Try again! Player - \033[1;34m Player (X) \033[0;0m ! ")
            else:
                print(f"Oops! Try again! Player - \033[1;31m Player (0) \033[0;0m ! ")
            printBoard()

def playerInputb7():
    while True:
        if currentPlayer == "X":
            inp = int(input(f"Enter a number 1-9 \033[1;34m Player (X) \033[0;0m : "))
        else:
            inp = int(input(f"Enter a number 1-9 \033[1;31m Player (0) \033[0;0m : "))
        if inp >= 1 and inp <= 9 and b7[inp-1] == "-":
            b7[inp-1] = currentPlayer
            break
        else:
            if currentPlayer == "X":
                print(f"Oops! Try again! Player - \033[1;34m Player (X) \033[0;0m ! ")
            else:
                print(f"Oops! Try again! Player - \033[1;31m Player (0) \033[0;0m ! ")
            printBoard()

def playerInputb8():
    while True:
        if currentPlayer == "X":
            inp = int(input(f"Enter a number 1-9 \033[1;34m Player (X) \033[0;0m : "))
        else:
            inp = int(input(f"Enter a number 1-9 \033[1;31m Player (0) \033[0;0m : "))
        if inp >= 1 and inp <= 9 and b8[inp-1] == "-":
            b8[inp-1] = currentPlayer
            break
        else:
            if currentPlayer == "X":
                print(f"Oops! Try again! Player - \033[1;34m Player (X) \033[0;0m ! ")
            else:
                print(f"Oops! Try again! Player - \033[1;31m Player (0) \033[0;0m ! ")
            printBoard()

def playerInputb9():
    while True:
        if currentPlayer == "X":
            inp = int(input(f"Enter a number 1-9 \033[1;34m Player (X) \033[0;0m : "))
        else:
            inp = int(input(f"Enter a number 1-9 \033[1;31m Player (0) \033[0;0m : "))
        if inp >= 1 and inp <= 9 and b9[inp-1] == "-":
            b9[inp-1] = currentPlayer
            break
        else:
            if currentPlayer == "X":
                print(f"Oops! Try again! Player - \033[1;34m Player (X) \033[0;0m ! ")
            else:
                print(f"Oops! Try again! Player - \033[1;31m Player (0) \033[0;0m ! ")
            printBoard()
#check for win or tie

#check b1 sub-board

def checkWinb1():
    if checkDiagonalb1() or checkColumnb1() or checkRowb1():
        winnerb1 = currentPlayer
        gameRunningb1 = False

def checkColumnb1():
    if (b1[0] == b1[1] == b1[2] and b1[0] != "-") or (b1[3] == b1[4] == b1[5] and b1[3] != "-") or (b1[6] == b1[7] == b1[8] and b1[6] != "-"):
        winnerb1 = currentPlayer
        return True
def checkRowb1():
    if (b1[0] == b1[3] == b1[6] and b1[0] != "-") or (b1[1] == b1[4] == b1[7] and b1[1] != "-") or (b1[2] == b1[5] == b1[8] and b1[2] != "-"):
        winnerb1 = currentPlayer
        return True
def checkDiagonalb1():
    if (b1[0] == b1[4] == b1[8] and b1[0] != "-") or (b1[2] == b1[4] == b1[6] and b1[2] != "-"):
        winnerb1 = currentPlayer
        return True
def checkTieb1():
    if "-" not in b1:
        checkWinb1()
        if winnerb1 == None:
            gameRunningb1 = False
            return True
        else:
            return False

#check b2 sub-board

def checkWinb2():
    if checkDiagonalb2() or checkColumnb2() or checkRowb2():
        winnerb2 = currentPlayer
        gameRunningb2 = False

def checkColumnb2():
    if (b2[0] == b2[1] == b2[2] and b2[0] != "-") or (b2[3] == b2[4] == b2[5] and b2[3] != "-") or (b2[6] == b2[7] == b2[8] and b2[6] != "-"):
        winnerb2 = currentPlayer
        return True
def checkRowb2():
    if (b2[0] == b2[3] == b2[6] and b2[0] != "-") or (b2[1] == b2[4] == b2[7] and b2[1] != "-") or (b2[2] == b2[5] == b2[8] and b2[2] != "-"):
        winnerb2 = currentPlayer
        return True
def checkDiagonalb2():
    if (b2[0] == b2[4] == b2[8] and b2[0] != "-") or (b2[2] == b2[4] == b2[6] and b2[2] != "-"):
        winnerb2 = currentPlayer
        return True
def checkTieb2():
    if "-" not in b2:
        checkWinb2()
        if winnerb2 == None:
            gameRunningb2 = False
            return True
        else:
            return False

#check b3 sub-board

def checkWinb3():
    if checkDiagonalb3() or checkColumnb3() or checkRowb3():
        winnerb3 = currentPlayer
        gameRunningb3 = False

def checkColumnb3():
    if (b3[0] == b3[1] == b3[2] and b3[0] != "-") or (b3[3] == b3[4] == b3[5] and b3[3] != "-") or (b3[6] == b3[7] == b3[8] and b3[6] != "-"):
        winnerb3 = currentPlayer
        return True
def checkRowb3():
    if (b3[0] == b3[3] == b3[6] and b3[0] != "-") or (b3[1] == b3[4] == b3[7] and b3[1] != "-") or (b3[2] == b3[5] == b3[8] and b3[2] != "-"):
        winnerb3 = currentPlayer
        return True
def checkDiagonalb3():
    if (b3[0] == b3[4] == b3[8] and b3[0] != "-") or (b3[2] == b3[4] == b3[6] and b3[2] != "-"):
        winnerb3 = currentPlayer
        return True
def checkTieb3():
    if "-" not in b3:
        checkWinb3()
        if winnerb3 == None:
            gameRunningb3 = False
            return True
        else:
            return False

#check b4 sub-board

def checkWinb4():
    if checkDiagonalb4() or checkColumnb4() or checkRowb4():
        winnerb4 = currentPlayer
        gameRunningb4 = False

def checkColumnb4():
    if (b4[0] == b4[1] == b4[2] and b4[0] != "-") or (b4[3] == b4[4] == b4[5] and b4[3] != "-") or (b4[6] == b4[7] == b4[8] and b4[6] != "-"):
        winnerb4 = currentPlayer
        return True
def checkRowb4():
    if (b4[0] == b4[3] == b4[6] and b4[0] != "-") or (b4[1] == b4[4] == b4[7] and b4[1] != "-") or (b4[2] == b4[5] == b4[8] and b4[2] != "-"):
        winnerb4 = currentPlayer
        return True
def checkDiagonalb4():
    if (b4[0] == b4[4] == b4[8] and b4[0] != "-") or (b4[2] == b4[4] == b4[6] and b4[2] != "-"):
        winnerb4 = currentPlayer
        return True
def checkTieb4():
    if "-" not in b4:
        checkWinb4()
        if winnerb4 == None:
            gameRunningb4 = False
            return True
        else:
            return False

#check b5 sub-board

def checkWinb5():
    if checkDiagonalb5() or checkColumnb5() or checkRowb5():
        winnerb5 = currentPlayer
        gameRunningb5 = False

def checkColumnb5():
    if (b5[0] == b5[1] == b5[2] and b5[0] != "-") or (b5[3] == b5[4] == b5[5] and b5[3] != "-") or (b5[6] == b5[7] == b5[8] and b5[6] != "-"):
        winnerb5 = currentPlayer
        return True
def checkRowb5():
    if (b5[0] == b5[3] == b5[6] and b5[0] != "-") or (b5[1] == b5[4] == b5[7] and b5[1] != "-") or (b5[2] == b5[5] == b5[8] and b5[2] != "-"):
        winnerb5 = currentPlayer
        return True
def checkDiagonalb5():
    if (b5[0] == b5[4] == b5[8] and b5[0] != "-") or (b5[2] == b5[4] == b5[6] and b5[2] != "-"):
        winnerb5 = currentPlayer
        return True
def checkTieb5():
    if "-" not in b5:
        checkWinb5()
        if winnerb5 == None:
            gameRunningb5 = False
            return True
        else:
            return False

#check b6 sub-board

def checkWinb6():
    if checkDiagonalb6() or checkColumnb6() or checkRowb6():
        winnerb6 = currentPlayer
        gameRunningb6 = False

def checkColumnb6():
    if (b6[0] == b6[1] == b6[2] and b6[0] != "-") or (b6[3] == b6[4] == b6[5] and b6[3] != "-") or (b6[6] == b6[7] == b6[8] and b6[6] != "-"):
        winnerb6 = currentPlayer
        return True
def checkRowb6():
    if (b6[0] == b6[3] == b6[6] and b6[0] != "-") or (b6[1] == b6[4] == b6[7] and b6[1] != "-") or (b6[2] == b6[5] == b6[8] and b6[2] != "-"):
        winnerb6 = currentPlayer
        return True
def checkDiagonalb6():
    if (b6[0] == b6[4] == b6[8] and b6[0] != "-") or (b6[2] == b6[4] == b6[6] and b6[2] != "-"):
        winnerb6 = currentPlayer
        return True
def checkTieb6():
    if "-" not in b6:
        checkWinb6()
        if winnerb6 == None:
            gameRunningb6 = False
            return True
        else:
            return False

#check b7 sub-board

def checkWinb7():
    if checkDiagonalb7() or checkColumnb7() or checkRowb7():
        winnerb7 = currentPlayer
        gameRunningb7 = False

def checkColumnb7():
    if (b7[0] == b7[1] == b7[2] and b7[0] != "-") or (b7[3] == b7[4] == b7[5] and b7[3] != "-") or (b7[6] == b7[7] == b7[8] and b7[6] != "-"):
        winnerb7 = currentPlayer
        return True
def checkRowb7():
    if (b7[0] == b7[3] == b7[6] and b7[0] != "-") or (b7[1] == b7[4] == b7[7] and b7[1] != "-") or (b7[2] == b7[5] == b7[8] and b7[2] != "-"):
        winnerb7 = currentPlayer
        return True
def checkDiagonalb7():
    if (b7[0] == b7[4] == b7[8] and b7[0] != "-") or (b7[2] == b7[4] == b7[6] and b7[2] != "-"):
        winnerb7 = currentPlayer
        return True
def checkTieb7():
    if "-" not in b7:
        checkWinb7()
        if winnerb7 == None:
            gameRunningb7 = False
            return True
        else:
            return False

#check b8 sub-board

def checkWinb8():
    if checkDiagonalb8() or checkColumnb8() or checkRowb8():
        winnerb8 = currentPlayer
        gameRunningb8 = False

def checkColumnb8():
    if (b8[0] == b8[1] == b8[2] and b8[0] != "-") or (b8[3] == b8[4] == b8[5] and b8[3] != "-") or (b8[6] == b8[7] == b8[8] and b8[6] != "-"):
        winnerb8 = currentPlayer
        return True
def checkRowb8():
    if (b8[0] == b8[3] == b8[6] and b8[0] != "-") or (b8[1] == b8[4] == b8[7] and b8[1] != "-") or (b8[2] == b8[5] == b8[8] and b8[2] != "-"):
        winnerb8 = currentPlayer
        return True
def checkDiagonalb8():
    if (b8[0] == b8[4] == b8[8] and b8[0] != "-") or (b8[2] == b8[4] == b8[6] and b8[2] != "-"):
        winnerb8 = currentPlayer
        return True
def checkTieb8():
    if "-" not in b8:
        checkWinb8()
        if winnerb8 == None:
            gameRunningb8 = False
            return True
        else:
            return False

#check b9 sub-board

def checkWinb9():
    if checkDiagonalb9() or checkColumnb9() or checkRowb9():
        winnerb9 = currentPlayer
        gameRunningb9 = False

def checkColumnb9():
    if (b9[0] == b9[1] == b9[2] and b9[0] != "-") or (b9[3] == b9[4] == b9[5] and b9[3] != "-") or (b9[6] == b9[7] == b9[8] and b9[6] != "-"):
        winnerb9 = currentPlayer
        return True
def checkRowb9():
    if (b9[0] == b9[3] == b9[6] and b9[0] != "-") or (b9[1] == b9[4] == b9[7] and b9[1] != "-") or (b9[2] == b9[5] == b9[8] and b9[2] != "-"):
        winnerb9 = currentPlayer
        return True
def checkDiagonalb9():
    if (b9[0] == b9[4] == b9[8] and b9[0] != "-") or (b9[2] == b9[4] == b9[6] and b9[2] != "-"):
        winnerb9 = currentPlayer
        return True
def checkTieb9():
    if "-" not in b9:
        checkWinb9()
        if winnerb9 == None:
            gameRunningb9 = False
            return True
        else:
            return False

def checkWin():
    checkWinb1()
    checkWinb2()
    checkWinb3()
    checkWinb4()
    checkWinb5()
    checkWinb6()
    checkWinb7()
    checkWinb8()
    checkWinb9()

#switch the player

def switchPlayer():
    global currentPlayer
    if currentPlayer == "X":
        currentPlayer = "O"
    else:
        currentPlayer = "X"




#check for win or tie again

printBoard()
print("Enter sub-board number")
while True:
    subBoardNum = int(input())
    if subBoardNum == 1:
        playerInputb1()
        printBoard()
        break
    elif subBoardNum == 2:
        playerInputb2()
        printBoard()
        break
    elif subBoardNum == 3:
        playerInputb3()
        printBoard()
        break
    elif subBoardNum == 4:
        playerInputb4()
        printBoard()
        break
    elif subBoardNum == 5:
        playerInputb5()
        printBoard()
        break
    elif subBoardNum == 6:
        playerInputb6()
        printBoard()
        break
    elif subBoardNum == 7:
        playerInputb7()
        printBoard()
        break
    elif subBoardNum == 8:
        playerInputb8()
        printBoard()
        break
    elif subBoardNum == 9:
        playerInputb9()
        printBoard()
        break
    else: print("Invalid input, try again"); print("Enter sub-board number"); printBoard()

switchPlayer()

import time
time.sleep(5)